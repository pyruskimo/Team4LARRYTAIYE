You must have at least 10 substantive commits per group member that are marked "feature".  Any fixes to "features" must be marked as fixes and do not count.  Commits for creating files or renaming files or other non-feature work should be named "task".  
Commit message Examples:
Feature:  Added definition of the term repository.
Fix: Updated definition of repository
Task: Uploaded an image screenshot for a repository
Testing - Created a new branch
Project Description
For this project, you need to explain how the usage of Git, Docker, automated testing, and continuous integration can improve the productivity and competitiveness of a company.  Your group also needs to have 2-3 (depending on group size) sections about the following topics:  
You must explain the gitFlow (Links to an external site.) workflow and have a section to define and give examples of how to use the following Git commands and terminology:
##WORK ON THESE COMMANDS##

What is a Repository?
A Repository is the git folder inside a project. This Repository must have a name and a description which tracks all changes made to the files in the project. I also realize that all these changes made within the project file builds a history ovwhich tracks all changes made to the files in the project. I also realize that all these changes made within the project file builds a history ovetime. Meaning, if you delete the .git/ folder, then you delete your project history
 
**Repository**:
After Git has been installed and configured, next is to put Git in the appropriate condition to start its operation. That is asking Git to start tracking changes in a particular project. We need to however decide where to put the project for Git to start tracking. This location is called a Repository. The repository can be a new folder created in a Windows directory on a Desktop.


The folder can be accessed via the command line by changing in to the windows directory in which that folder was created. Once in the root of the folder via the command Line, entering - Git init will tell Git to get everything ready to start doing its tracking.

A repository can also be created in the User Interface from the home screen after signing into your account, and then selecting 'New' or the 'Plus' sign (+) on the top right corner of the home page. See file attachment called 'Create a new repository.

[Here is the URL on how to create a Repo!](https://github.com/pyruskimo/LarryTaiyeImages/blob/master/TestImage1.PNG)
[Here is the URL on how to create a Repo1!](https://github.com/pyruskimo/LarryTaiyeImages/TestImage1.PNG)

What is Cloning in a Git?
Cloning is a process of creating an identical copy of a Git Remote Repository for a Project
When we clone a repository, all the files are downloaded to the local master but the remote git repository remains unchanged. Making changes and committing them on your local repository (cloned repository) will not affect the remote repository that you cloned in any way. These changes made on the local master can be synced with the remote repository anytime the user wants.

Why and how we Clone a Repository or a Project 
As mentioned in the initial definition, cloning downloads the complete source code to the local system. Going through below will help us understand step by step why and how we clone a repository.
Contribute to Organizational Projects:  A centralized system is required for organizations where multiple people work on the same code base. Cloning helps to achieve this motive. By cloning, people can edit the project code to either fix some issue or provide some modifications i.e. an extra or extended feature. This definitely helps in producing better software in less time with greater collaboration.
Make use of Open Source Repositories:  If someone wants to use some functionality which has already been developed by someone else, then why code it from scratch and waste time & resources when there are unlimited open source repositories that are available and can be modified which may directly fit into the projects.  
The cloning process works in these steps:
•	Clone a Repository: The user starts from the upstream repository in Git. Since the user navigated to the repository because he/she is interested in the concept and they like to contribute. The process starts from cloning the repository into their local master. Now they have the exact copy of the project files on their system to make the changes.
•	Make the desired changes: After cloning, contributors provide their contribution to the repository. Contribution in the form of editing the source files resulting in either a bug fix or adding functionality or maybe optimizing the code. But the bottom line is, everything happens on their local system.
•	Pushing the Changes back to the Original Repository: Once the changes are done, the modifications can be pushed to the upstream repository. 
Note: Owner of the repository can allow/disallow direct changes to Central Repository, set various notifications (It could be notification for any change pushed to central Repository).

Added a Repository image: 


What is Forking in a Git?
Forking is a process of creating a copy of a complete repository to the user’s GitHub Account from another account. When a user forks a repository, all the files in the repository are automatically copied to the user’s account on GitHub and it feels like the user’s own the repository. This process is similar to copying a folder from one drive to another drive in a computer. The user is then free to use this repository either for their purpose or experiment with changes in the code. Through git forking, the users can develop their own modifications to the code that belongs to someone else.
 
Forking a repository on GitHub is done for two main purposes:

Improving someone’s project/software or code: Improving can be that I am adding a new feature to the existing software/repository. For example, I navigate to a repository and liked the concept of the software, but then I have something else in mind that could be useful for the same software. I can fork the repository, develop the feature on my machine and send the changes to the owner of the repository.

Reusing the code in a project: A user can also make use of git fork to fork the repository of another user to use in their own project. The popularity of Git is also because people add their code, project, module, software, etc on GitHub as a public repository. Now other people are allowed to use that open source code to their project, which helps them to save their efforts and time. 
Note: Forking is allowed for public repositories without permission. But if the repository is private, one can only be able to fork if he or she has permission from the owner of the repository. (Please see screenshot below)

Instead of using a single server-side repository to act as the “central” codebase, forking gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one.
        
What is Branch in a Git?
A branch is a separate line of development that enables the creation of a ew branch with the git branch command. When a programmer fixes a bug or adds a new feature, he or she creates a new branch to make the changes in a safe way, without threatening existing, working code. 
       
**Branch**:
A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed in Git Basics, the first module of this series. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project.

What is Commit in a Git?
Commits is an important part of the Git version control system. One way to think about commits is that they are a snapshot of a project during a certain moment in the project’s history. The "commit" command is used to save your changes to the local repository. Note that you have to explicitly tell Git which changes you want to include in a commit before running the "git commit" command. This means that a file won't be automatically included in the next commit just because it was changed. Instead, you need to use the "git add" command to mark the desired changes for inclusion

**Commit**: 
Commit implies telling Git to track the first change.

What is Merge in a Git?
The "Merge" command is used to integrate changes from another branch. The target of this integration (i.e. the branch that receives changes) is always the currently checked out Master or Repository branch. While Git can perform most integrations automatically, some changes will result in conflicts that have to be solved by the user before the merge can be completed. 

What is Checkout in a Git?
The command git clone is used to fetch the desired repository from the remote git server to a local computer and this process is known as cloning.  When you clone a repository, you start on the local repository’s master branch by default. To avoid any confusion and proper documentation purposes, it is advisable to make a new branch and work in that temporary branch. To make a new branch git checkout command is used. The command git checkout is used to check out the desired status of your repository be it any branch or a particular file. It can also be used for switching between existing local branches.
In summary, checkout has 3 uses:
1.	To create a new branch from the current branch.
2.	To switch between existing local branches.
3.	To check out and go to a particular status of a particular file.

What is Push in a Git?
In its simplest definition, the Git push command can be taken as uploading the content to the remote repository.
After adding a feature, making changes or other tasks in the local repository, we can use the push command for uploading these changes to the remote repository (e.g. Github) so other team members can see it and may update their project accordingly.

What is Pull in a Git?
Git pull is a magical way to perform a combined operation of git-fetch & git-merge with a single command. “Pull,” which is self-explanatory, depicts that the user is trying to fetch something from the repository. In a way, “fetch” is not the right word because we already discussed git fetch command. If you think that fetching is all that Git Pull does, then why aren’t we satisfied by Git Fetch?
Git Pull will perform Git Fetch without telling the user and merge those changes automatically without asking from the user. 

Remote Add / Remove / Show

What is Status in a Git?
Git status command is used in Git to know the status of the working tree. It shows the state of your working directory and helps you see all the files which are untracked by Git, staged or unstaged. In shorter terms, Git will show you any difference in the current document and the Master file. Along with this, Git status will also show you the changed or new file in the repository

Master Branch



The trick with this assignment it not to have a lot of text to commit you want small commits like one definition at t a time.  You have to think 2 things:
You just want to have to edit a little bit of text to resolve a merge conflict
You don’t want merge conflicts and you avoid merge conflicts by not having the same text on a line
The basic steps are

Create a repo
Everyone clones to their clocks
Create a branch for the task / definition
On your local do a commit on the Branch
Push to the branch to GitHub
Create a pull request for the branch to be merged
Merge the branch to master
Everyone pulls the master branch
Repeat for the next tasks
You will need to add all team members to the repo using the settings menu so everyone can push

Notes you can also fork a repo to your own and then clone and this makes it so you don’t have to add everyone to the main repo.  But when you create a pull request you got to click this link that says “compare across forks” so you can pick out branches from other forks
